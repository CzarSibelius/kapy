@page "/counter"
@using System.Timers
@implements IDisposable
@inject IGameStateStorageService StateService;
@inject IGameManager gameManager;

<nav class="navbar navbar-expand-lg navbar-light bg-light">
    <a class="navbar-brand">Käpy</a>

    <div class="collapse navbar-collapse" id="navbarSupportedContent">
        <ul class="navbar-nav mr-auto">
            <li class="nav-item">
                <a class="nav-link" @onclick="LoadState">Lataa</a>
            </li>
            <li class="nav-item">
                <a class="nav-link" @onclick="SaveState">Tallenna</a>
            </li>
            <li class="nav-item">
                <a class="nav-link" @onclick="ResetState">Aloita alusta</a>
            </li>
        </ul>
    </div>
</nav>

@if (gameManager.State != null)
{
    <div class="row">
        <div class="col">
            @foreach (var resource in gameManager.State.ResourceAmounts)
            {
                <p>
                    @resource.Name: @resource.Amount @(gameManager.State.HasTechnology(TechnologyConfig.ResurssiMittari)
                                                        ? $"({statistics.Get(resource.Name)}/s)"
                                                        : "")
                </p>
            }
        </div>
        <div class="col">
            @if (gameManager.State.ResearchableTechnologies.Any() || gameManager.State.ResearchedTechnologies.Any())
            {
                <h4>Uudet teknologiat</h4>
                @foreach (var technology in gameManager.State.ResearchableTechnologies)
                {
                    <p>
                        @technology.Name
                        <button class="btn btn-primary" @onclick="() => Research(technology)">Tutki</button>
                    </p>

                }
            }
            @if (gameManager.State.ResearchedTechnologies.Any())
            {
                <h4>Tutkitut</h4>
                @foreach (var technology in gameManager.State.ResearchedTechnologies)
                {
                    <p>@technology.Name</p>
                }
            }
        </div>

    </div>
    <div class="row">

        @foreach (var resource in gameManager.State.UnlockedResources)
        {
            if (resource.CanBeBuilt(gameManager.State))
            {
                <button class="btn btn-primary" @onclick="() => IncrementResource(resource.Name)">@resource.Name</button>
            }
            else
            {
                <button class="btn btn-primary" disabled>@resource.Name</button>
            }

        }

    </div>
}
@code {

    private Statistics statistics = new Statistics();

    private Timer secTimer = new Timer(1000);


    protected override async Task OnInitializedAsync()
    {
        secTimer.Elapsed += OnTimer;
        secTimer.Enabled = true;
        await LoadState();
    }

    private void IncrementResource(string resource)
    {
        gameManager.AddResource(resource, 1);
        statistics.AddStatistics(resource, 1);
        InvokeAsync(StateHasChanged);
    }

    private void Research(Technology technology)
    {
        gameManager.Research(technology);
    }

    private void OnTimer(Object source, ElapsedEventArgs e)
    {
        statistics.Clear();
        InvokeAsync(StateHasChanged);
    }

    private async Task SaveState()
    {
        await StateService.SaveStateAsync(gameManager.State);
    }

    private async Task LoadState()
    {
        var gameState = await StateService.GetStateAsync();
        gameManager.State = gameState;
    }

    private void ResetState()
    {
        gameManager.State = new GameState();
    }

    void IDisposable.Dispose()
    {
        secTimer?.Dispose();
    }
}
