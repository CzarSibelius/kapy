@page "/counter"
@using System.Timers
@implements IDisposable

<h1>Counter</h1>

<div class="row">
    <div class="col">
        @foreach (var resource in gameState.Resources.Where(r => r.IsUnlocked(gameState)))
        {
            <p>@resource.Name: @resource.Amount (@statistics.Get(resource.Name)/s)</p>
        }
    </div>
    <div class="col">
        @if (gameState.ResearchableTechnologies.Any() || gameState.ResearchedTechnologies.Any())
        {
            <h4>Uudet teknologiat</h4>
            @foreach (var technology in gameState.ResearchableTechnologies)
            {
                <button class="btn btn-primary" @onclick="() => Research(technology)">
                    @technology.Name
                </button>
            }
        }
        @if (gameState.ResearchedTechnologies.Any())
        {
            <h4>Tutkitut</h4>
            @foreach (var technology in gameState.ResearchedTechnologies)
            {
                <p>@technology.Name</p>
            }
        }
    </div>

</div>

@foreach (var resource in gameState.Resources.Where(r => r.IsUnlocked(gameState)))
{
    if (resource.CanBeBuilt(gameState))
    {
        <button class="btn btn-primary" @onclick="() => IncrementResource(resource.Name)">@resource.Name</button>
    }
    else
    {
        <button class="btn btn-primary" disabled>@resource.Name</button>
    }

}

@code {

    private GameState gameState = new GameState();
    private Statistics statistics = new Statistics();

    private Timer secTimer = new Timer(1000);


    protected override void OnInitialized()
    {
        secTimer.Elapsed += OnTimer;
        secTimer.Enabled = true;

        base.OnInitialized();
    }

    private void IncrementResource(string resource)
    {
        gameState.AddResource(resource, 1);
        statistics.AddStatistics(resource, 1);
    }

    private void Research(Technology technology)
    {
        gameState.ResearchedTechnologies.Add(technology);
    }

    private void OnTimer(Object source, ElapsedEventArgs e)
    {
        statistics.Clear();
        InvokeAsync(StateHasChanged);
    }

    void IDisposable.Dispose()
    {
        secTimer?.Dispose();
    }
}
